import time
import pytest
import requests

#------------------------------------------------------Basic test functions


def test_create_new_pet_by_id(pet_id, *, time_sleep=20):
    """–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞"""
    print(f'\nTest: {test_create_new_pet_by_id.__name__}')


    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ"""
    base_url = "https://petstore.swagger.io/v2"
    endpoint = "/pet"
    url = base_url + endpoint
    api_key = "simple_key"
    headers = {"Content-Type": "application/json", "api_key": api_key}


    """–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"""
    body = {"id": pet_id,
        "category": {'id': 0, 'name': 'Antagonist'},
        "name": 'Madara',
        "photoUrls": ["None"],
        "tags": [{'id': 0, 'name': 'Have Susanoo'}],
        "status": 'available'}


    """–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å –∫–æ–¥, –æ–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    response = requests.post(url, json=body, headers=headers)
    code = response.status_code
    time.sleep(time_sleep)


    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∞"""
    if code == 200:
        print(f'{"Request:".ljust(10)}{body}\n{"Response:".ljust(10)}{response.json()}\nStatus code: {code}\nüü¢ Test PASSED')
        return code, response.json()

    else:
        print(f'{"Request:".ljust(10)}{body}\n{"Response:".ljust(10)}{response.json()}\nStatus code: {code}\nüî¥ Test NOT PASSED')
        return code, response.json()


def test_read_info_pet_by_id(pet_id, *, response_json=None):
    """–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–∏—Ç–æ–º—Ü–µ –ø–æ id"""
    print(f'\nTest: {test_read_info_pet_by_id.__name__}')

    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ"""
    base_url = "https://petstore.swagger.io/v2"
    endpoint = "/pet"
    url = base_url + endpoint + f'/{pet_id}'
    api_key = "simple_key"
    headers = {"Content-Type": "application/json", "api_key": api_key}
    print(url)

    """–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –∑–∞–ø—Ä–æ—Å–∞"""
    response = requests.get(url, headers=headers)
    code = response.status_code


    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∞"""
    if code == 200 and response_json == response.json():
        print(f'{"Response:".ljust(10)}{response.json()}\nStatus code: {code}\nüü¢ Test PASSED')
        return code, response.json()

    elif code != 200 or response_json != response.json():
        print(f'{"Response:".ljust(10)}{response.json()}\nStatus code: {code}\nüî¥ Test NOT PASSED')
        return code, response.json()


def test_update_data_pet_by_id(pet_id, *, time_sleep=20):
    """–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–∏—Ç–æ–º—Ü–µ –ø–æ id"""
    print(f'\nTest: {test_update_data_pet_by_id.__name__}')


    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ"""
    base_url = "https://petstore.swagger.io/v2"
    endpoint = "/pet"
    url = base_url + endpoint
    api_key = "simple_key"
    headers = {"Content-Type": "application/json", "api_key": api_key}


    """–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"""
    body = {
    "id": pet_id,
    "category": {"id": 1,"name": "Protagonist"},
    "name": 'Naruto',
    "photoUrls": ["None"],
    "tags": [{'id': 0, 'name': 'Have Bijou'}],
    "status": "available"}


    """–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –∑–∞–ø—Ä–æ—Å–∞, –æ–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    response = requests.put(url, json=body, headers=headers)
    code = response.status_code
    time.sleep(time_sleep)


    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∞"""
    if code == 200:
        print(f'{"Request:".ljust(10)}{body}\n{"Response:".ljust(10)}{response.json()}\nStatus code: {code}\nüü¢ Test PASSED')
        return code, response.json()

    else:
        print(f'{"Request:".ljust(10)}{body}\n{"Response:".ljust(10)}{response.json()}\nStatus code: {code}\nüî¥ Test NOT PASSED')
        return code, response.json()


def test_delete_pet_by_id_with_read_info(pet_id, *, time_sleep=20):
    """–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ id
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ 200 –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–º GET, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    """
    print(f'\nTest: {test_delete_pet_by_id_with_read_info.__name__}')

    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ"""
    base_url = "https://petstore.swagger.io/v2"
    endpoint = "/pet"
    url = f"{base_url}{endpoint}/{pet_id}"
    api_key = "simple_key"
    headers = {"Content-Type": "application/json", "api_key": api_key}
    print(f"Request URL: {url}")

    """–£–¥–∞–ª—è–µ–º –ø–∏—Ç–æ–º—Ü–∞"""
    response = requests.delete(url, headers=headers)
    code_delete = response.status_code

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∞"""
    if code_delete == 200:
        print(f'Status code: {code_delete}\nPet {pet_id} successfully deleted.')
        time.sleep(time_sleep)
        check_response = requests.get(url, headers=headers)
        check_code = check_response.status_code

        if check_code == 404:
            print(f'üü¢ Test PASSED: Pet {pet_id} was successfully deleted and no longer exists.')
            return code_delete, check_code

        else:
            print(f'üî¥ Test NOT PASSED: Pet {pet_id} still exists after deletion!')

            try:
                print(f'Response: {check_response.json()}')

            except ValueError:
                print(f'Invalid JSON Response: {check_response.text}')

            return code_delete, check_code,

    elif code_delete == 404:
        print(f'Status code: {code_delete}\nüî¥ Test NOT PASSED: Pet {pet_id} was not found, nothing to delete.')

        return code_delete, response.text

    else:
        print(f'Status code: {code_delete}\nüî¥ Unexpected error! Status code: {code_delete}')
        try:
            error_response = response.json()
            print(f'Response JSON: {error_response}')
        except ValueError:
            print(f'Invalid JSON Response: {response.text}')
        return code_delete, response.text


#------------------------------------------------------Helper test functions


def test_manual_delete_pet(pet_id, *, time_sleep=20):
    """–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ id
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    """

    print(f'\nForced deletion is in progress...')


    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ"""
    base_url = "https://petstore.swagger.io/v2"
    endpoint = "/pet"
    url = f"{base_url}{endpoint}/{pet_id}"
    api_key = "simple_key"
    headers = {"Content-Type": "application/json", "api_key": api_key}
    print(url)


    """–£–¥–∞–ª—è–µ–º –ø–∏—Ç–æ–º—Ü–∞"""
    code = None
    count = 0
    while code != 404 and count < 5:
        count += 1
        response = requests.delete(url, headers=headers)
        code = response.status_code  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Status code
        time.sleep(time_sleep)
    print(f'Removal attempts have been made: {count}')


    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∞"""
    if code == 404:
        print(f"üü† Pet with ID {pet_id} successfully deleted.")

    else:
        print(f"üî¥ Failed to delete pet with ID {pet_id}.")